{"ast":null,"code":"import _regeneratorRuntime from\"D:/work/react/weathercomplete/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/work/react/weathercomplete/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/work/react/weathercomplete/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import'./reset.css';import'./font.css';import'./Weather.css';import'weather-icons/css/weather-icons.min.css';/* #1. 컴포넌트 메서드 */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Weather(){// 검색 지역 초기값 설정 및 바뀌는 값 저장소\n// useState를 통해 동적으로 바뀔 수 있도록 설정.\n// areaValue => api에서 사용하는 주소 값\n// areaKr => 사용자에게 표시할 주소 값을 삽입!\nvar _useState=useState('Seoul'),_useState2=_slicedToArray(_useState,2),areaValue=_useState2[0],setAreaValue=_useState2[1];var _useState3=useState('서울특별시'),_useState4=_slicedToArray(_useState3,2),areakr=_useState4[0],setAreaKr=_useState4[1];/*\r\n  # fetch 사용법 - https://www.daleseo.com/js-window-fetch/\r\n  : fetch() 함수는 첫번째 인자로 URL, 두번째 인자로 옵션 객체를 받고, Promise 타입의 객체를 반환. \r\n    반환된 객체는, API 호출이 성공했을 경우에는 응답(response) 객체를 resolve하고, \r\n    실패했을 경우에는 예외(error) 객체를 reject합니다.\r\n  [소스예시]\r\n  fetch(url, options)\r\n    .then((response) => console.log(\"response:\", response))\r\n    .catch((error) => console.log(\"error:\", error));\r\n  [옵션(options) 객체]\r\n    a. HTTP 방식(method), \r\n    b. HTTP 요청 헤더(headers), \r\n    c. HTTP 요청 전문(body) 등을 설정. \r\n  [응답(response) 객체]\r\n    a. HTTP 응답 상태(status), \r\n    b. HTTP 응답 헤더(headers), \r\n    c. HTTP 응답 전문(body) 등을 읽어올 수 있음.\r\n  [GET 호출]\r\n  : 단순히 원격 API에 있는 데이터를 가져올 때 쓰이는 GET 방식의 HTTP 통신.\r\n  fetch() 함수는 디폴트로 GET 방식으로 작동, GET 방식은 요청 전문을 받지 않기 때문에 옵션 인자가 필요가 없음.\r\n  [코드예시]\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts/1\").then((response) =>\r\n  console.log(response) // (콘솔에서보면) 응답 객체를 통해 응답 상태가 200 OK\r\n  [REST API]\r\n  => 대부분의 REST API들은 JSON 형태의 데이터를 응답하기 때문에, 응답(response) 객체는 json() 메서드를 제공\r\n  => 이 메서드를 호출하면, 응답(response) 객체로 부터 JSON 포멧의 응답 전문을 자바스크립트 객체로 변환하여 얻을 수 있음.\r\n);\r\n*/ /* #2. useEffect => API 데이터 가져오는 기능,  */ // useEffect는 클래스형의 생명주기함수를 함수형 컴포넌트에서도 사용할 수 있도록 나온 기능임!\n// 첫번째 인자 = 실행시킬 함수, 두번째 인자에는 검사할 변수 값(배열로 넣습니다![])을 넣어 변수값이 변경될 때 마다 실행됨.\n// 두번째 인자를 안 넣을 경우 => 리렌더링될때마다 실행되며, 빈배열을 넣게될 시 => 최초 1회만 실행!\n// useEffect는 처음 실행할 때 반드시 한번 실행됨!\nuseEffect(function(){// 외부 데이터를 가져오도록 fetch 함수를 사용.\n// jquery의 ajax를 사용해보셨다면 이해하기 편할 수 있습니다!\n// fetch를 통해 외부 데이터를 json으로 받아올 수 있음.\n// fetch 기본설정\n// 옵션이 여러가지 있지만.. 기본 옵션인 GET method로 받은 설정만 넣음.\n// form 태그의 개념과 비슷합니다!\nvar init={method:\"GET\"// GET, POST, PUT, DELETE...\n};// 작성할 도큐먼트 찾기\nvar weatherEl=document.querySelector('.weather');weatherEl.innerHTML=\"<img src=\\\"./images/load.gif\\\" alt=\\\"\\uB85C\\uB529\\uD654\\uBA74\\\"/>\";// fetch를 실행. 첫번째 인자 = 주소값, 두번째 인자 = 옵션값 넣어줌.\n// 주소에 필요한 옵션 파라미터를 넣어줌. 여기서는 지역값과 api key를 넣었음. (?q=\"지역값\"&appid=\"API key\")\n// then = fetch가 이루어지면 실행되는 함수로 => async와 await을 통해 데이터를 받을 수 있음.\n// https://api.openweathermap.org/data/2.5/weather?q=Seoul&units=metric&appid=81f458812bf2ce501b166301fae5f46a \n// => ?q=Seoul로 변경후 주소창 확인해 볼것\nfetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(areaValue,\"&units=metric&appid=f47b7f358e7e20494119bb7bcc6b2455\"),init)// fetch(`https://api.openweathermap.org/data/2.5/weather?q=${areaValue}&units=metric&appid=cc2f3c97f80d9cd216c70602a5b38378`, init)\n.then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response){var dataWrite,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;// object Objedct 나옴 , 하지마\n// json 데이터 확인 후, 필요 데이터를 꺼내서 html에 적용! => data 변수로 위에서 받았음\ndataWrite=function dataWrite(){// 일출 = unix, UTC 타입으로 반환된 값\nvar sunriseHour=new Date(data.sys.sunrise*1000).getHours();// 밀리세컨 만들어서 시간전체정보에 .getHour()로 시간만 추출\nconsole.log('일출시간 전체 정보 출력 = ',Date(data.sys.sunrise*1000));var sunriseMin=new Date(data.sys.sunrise*1000).getMinutes();console.log('일출시간 분으로 출력 = ',sunriseMin);// 일몰\nvar sunsetHour=new Date(data.sys.sunset*1000).getHours();var sunsetMin=new Date(data.sys.sunset*1000).getMinutes();// 아이콘 작성하기 = 아래 이미지에 적용\nvar icon=data.weather[0].icon;// 01n or 01d\nvar bg=document.querySelector('body');// api 기본 아이콘 값에 낮과 밤을 나타내는 n와 d가 들어있어 \n// => n이 들어있을 시에는 낮, d가 들어있을 시에는 밤으로 배경색을 줌.\nif(icon.indexOf('n')>0){// api 아이콘이 낮이면\nif(bg.classList.contains('day')){// Weather.css 클래스가 day면\nbg.classList.remove('day');// day 제거\n}bg.classList.add('night');// 클래스에 night 추가\n}else if(icon.indexOf('d')>0){// api 아이콘이 밤이면\nif(bg.classList.contains('night')){bg.classList.remove('night');}bg.classList.add('day');// 클래스에 day 추가\n}// return으로 document에 작성될 값을 설정. = 첫화면에 그려질 내용 코딩\nreturn(// ${weatherIcon[icon]}.png => 아래 수퍼컴포넌트에서 날씨 아이콘 가져옴\n// ${areakr} => 브라우저 메인에 표시될 한글로 표시될 지역명 (예)서울특별시\n// 현재기온 : => 나머지는 받은 api data에서 원하는 출력하면 됨\n\"\\n              <div class=\\\"weatherIcon\\\">\\n                <img class=\\\"weatherImg\\\" src=\\\"./images/weather/\".concat(weatherIcon[icon],\".png\\\">\\n              </div>\\n\\n              <h2>\").concat(areakr,\"</h2>\\n              <div>\\uD604\\uC7AC\\uAE30\\uC628 : \\n                \").concat(data.main.temp,\"&deg; \\uCD5C\\uACE0\\uAE30\\uC628 : \").concat(data.main.temp_max,\"&deg; \\uCD5C\\uC800\\uAE30\\uC628 : \\n                \").concat(data.main.temp_min,\"&deg; \\uCCB4\\uAC10\\uC628\\uB3C4 : \").concat(data.main.feels_like,\"&deg;\\n              </div>\\n              <div>\\n                \\uC77C\\uCD9C : \").concat(sunriseHour,\"\\uC2DC \").concat(sunriseMin,\"\\uBD84 / \\uC77C\\uBAB0 : \").concat(sunsetHour,\"\\uC2DC \").concat(sunsetMin,\"\\uBD84\\n              </div>\\n            \"));};// end of method\n_context.next=4;return response.json();case 4:data=_context.sent;console.log('fetch이용 api json데이터 출력 => '+data);weatherEl.innerHTML=dataWrite();// 함수 <div className='weather'></div>에 적용\n_context.next=11;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);case 11:case\"end\":return _context.stop();}},_callee,null,[[0,9]]);}));return function(_x){return _ref.apply(this,arguments);};}());},[areaValue,areakr]);// 의존관계 삽입 => data변경시 useEffect() 재실행 | [areaValue=주소창 지역, areakr=한글표시 지역명= 아래 코딩해놓음]\n/* #3.최초 렌더링 될 시, select 폼에 미리 작성해놓은 객체를 option으로 넣음! */ /* areaGroup = 하단에 수퍼컴포넌트에서 지역정보 불러옴 */useEffect(function(){var areaList=document.querySelector('.areaList');var areaWrite=areaGroup.map(function(char){return\"<option value=\\\"\".concat(char.kr,\"\\\">\").concat(char.kr,\"</option>\");}).join('');// join() 메서드 = 배열의 모든 요소를 연결해 하나의 문자열로 만듦.\n// 지역 정보를 얻어와서 option \nareaList.innerHTML=areaWrite;},[]);/* #4. select값을 변경했을 시 날씨정보가 해당 도시로 바뀌도록 설정 함수. */function changeSelect(e){e.preventDefault();// select 선택된 지역을 할당\nvar areaName=document.querySelector('#select').value;// 아래 수퍼컴포넌트에서 값 가져옴\nareaGroup.forEach(function(result){if(areaName.indexOf(result.kr)>-1){// 한글 도시명으로 값이 있으면 | 배열은 0부터니까 -1로\nsetAreaKr(result.text);// 동적값 바꿔줌\nsetAreaValue(result.en);}else if(areaName.toLowerCase().indexOf(result.en.toLowerCase())>-1){// 영문 도시명으로 값이 있으면 \nsetAreaKr(result.text);setAreaValue(result.en);}});}/* 브라우저 하단에 폼 박스 그려줌 */return/*#__PURE__*/_jsxs(\"section\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"weather\"}),/*#__PURE__*/_jsx(\"h6\",{children:\"\\uC9C0\\uC5ED \\uBCC0\\uACBD\"}),/*#__PURE__*/_jsx(\"div\",{className:\"formBox\"}),/*#__PURE__*/_jsx(\"select\",{id:\"select\",className:\"areaList\",onChange:changeSelect.bind(this)})]});}export default Weather;// 날씨 api 사이트를 통해 영어 이름을 불러와서 객체 리스트로 저장.\n// id는 고유값으로 넣어두었고, 각 kr, text는 수동으로 작성함.\n// 특이한 경우에는 comment도 달아두었습니다!\nvar areaGroup=[{id:0,kr:'서울',en:'Seoul',text:'서울특별시'},{id:1,kr:'부산',en:'Busan',text:'부산광역시'},{id:2,kr:'인천',en:'Incheon',text:'인천광역시'},{id:3,kr:'대구',en:'Daegu',text:'대구광역시'},{id:4,kr:'대전',en:'Daejeon',text:'대전광역시'},{id:5,kr:'광주',en:'Gwangju',text:'광주광역시'},{id:6,kr:'수원',en:'Suwon-si',text:'경기도 수원시'},{id:7,kr:'울산',en:'Ulsan',text:'울산광역시'},{id:8,kr:'고양',en:'Goyang-si',text:'경기도 고양시'},{id:9,kr:'용인',en:'Yongin',text:'경기도 용인시'},{id:10,kr:'창원',en:'ChangWon',text:'경상남도 창원시'},{id:11,kr:'성남',en:'Seongnam-si',text:'경기도 성남시'},{id:12,kr:'청주',en:'Cheongju-si',text:'충청북도 청주시'},{id:13,kr:'부천',en:'Bucheon-si',text:'경기도 부천시'},{id:14,kr:'화성',en:'Hwaseong-si',text:'경기도 화성시'},{id:15,kr:'남양주',en:'Hwado',text:'경기도 남양주시',comment:'날씨 위치가 남양주시 화도읍으로 찍혀있어서 화도읍 날씨로 적용하였습니다.'},{id:16,kr:'전주',en:'Jeonju',text:'전라북도 전주시'},{id:17,kr:'천안',en:'Cheonan',text:'충청남도 천안시'},{id:18,kr:'안산',en:'Ansan-si',text:'경기도 안산시'},{id:19,kr:'안양',en:'Anyang-si',text:'경기도 안양시'},{id:20,kr:'김해',en:'Gimhae',text:'경상남도 김해시'},{id:21,kr:'평택',en:'Pyeongtaek-si',text:'경기도 평택시'},{id:22,kr:'포항',en:'Pohang',text:'경상북도 포항시'},{id:23,kr:'제주',en:'Jeju',text:'제주특별자치도 제주시'},{id:24,kr:'시흥',en:'Ansan-si',text:'경기도 시흥시',comment:'시흥시 날씨를 지원하지 않아, 가까운 안산 날씨로 적용하였습니다.'},{id:25,kr:'파주',en:'Paju',text:'경기도 파주시'},{id:26,kr:'의정부',en:'Uijeongbu-si',text:'경기도 의정부시'},{id:27,kr:'김포',en:'Gimpo-si',text:'경기도 김포시'},{id:28,kr:'구미',en:'Gumi',text:'경상북도 구미시'},{id:29,kr:'경기도 광주',en:'Goenae',text:'경기도 광주시',comment:'날씨 위치가 광주시 남종면으로 찍혀있어서 남종면의 날씨로 적용하였습니다.'}];var weatherIcon={// 맑음 (clear sky)\n'01d':'01d','01n':'01n',// 흐림 (약간의 구름 \tfew clouds)\n'02d':'02d','02n':'02n',// 흐림 (흩어진 구름 scattered clouds)\n'03d':'02d','03n':'02n',// 많은 구름 (broken clouds)\n'04d':'02d','04n':'02n',// 소나기 (shower rain)\n'09d':'09d','09n':'09d',// 비 (rain)\n'10d':'10d','10n':'10d',// 번개 (thunderstorm)\n'11d':'11d','11n':'11d',// 눈 (snow)\n'13d':'13d','13n':'13d',// 안개 (mist)\n'50d':'50d','50n':'50d'};","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","Weather","_useState","_useState2","_slicedToArray","areaValue","setAreaValue","_useState3","_useState4","areakr","setAreaKr","init","method","weatherEl","document","querySelector","innerHTML","fetch","concat","then","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","dataWrite","data","wrap","_callee$","_context","prev","next","sunriseHour","Date","sys","sunrise","getHours","console","log","sunriseMin","getMinutes","sunsetHour","sunset","sunsetMin","icon","weather","bg","indexOf","classList","contains","remove","add","weatherIcon","main","temp","temp_max","temp_min","feels_like","json","sent","t0","stop","_x","apply","arguments","areaList","areaWrite","areaGroup","map","char","kr","join","changeSelect","e","preventDefault","areaName","value","forEach","result","text","en","toLowerCase","children","className","id","onChange","bind","comment"],"sources":["D:/work/react/weathercomplete/src/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './reset.css'\r\nimport './font.css'\r\nimport './Weather.css'\r\nimport 'weather-icons/css/weather-icons.min.css'\r\n\r\n/* #1. 컴포넌트 메서드 */\r\nfunction Weather() {\r\n  // 검색 지역 초기값 설정 및 바뀌는 값 저장소\r\n  // useState를 통해 동적으로 바뀔 수 있도록 설정.\r\n  // areaValue => api에서 사용하는 주소 값\r\n  // areaKr => 사용자에게 표시할 주소 값을 삽입!\r\n  const [areaValue, setAreaValue] = useState('Seoul');\r\n  const [areakr, setAreaKr] = useState('서울특별시');\r\n/*\r\n  # fetch 사용법 - https://www.daleseo.com/js-window-fetch/\r\n  : fetch() 함수는 첫번째 인자로 URL, 두번째 인자로 옵션 객체를 받고, Promise 타입의 객체를 반환. \r\n    반환된 객체는, API 호출이 성공했을 경우에는 응답(response) 객체를 resolve하고, \r\n    실패했을 경우에는 예외(error) 객체를 reject합니다.\r\n  [소스예시]\r\n  fetch(url, options)\r\n    .then((response) => console.log(\"response:\", response))\r\n    .catch((error) => console.log(\"error:\", error));\r\n  [옵션(options) 객체]\r\n    a. HTTP 방식(method), \r\n    b. HTTP 요청 헤더(headers), \r\n    c. HTTP 요청 전문(body) 등을 설정. \r\n  [응답(response) 객체]\r\n    a. HTTP 응답 상태(status), \r\n    b. HTTP 응답 헤더(headers), \r\n    c. HTTP 응답 전문(body) 등을 읽어올 수 있음.\r\n  [GET 호출]\r\n  : 단순히 원격 API에 있는 데이터를 가져올 때 쓰이는 GET 방식의 HTTP 통신.\r\n  fetch() 함수는 디폴트로 GET 방식으로 작동, GET 방식은 요청 전문을 받지 않기 때문에 옵션 인자가 필요가 없음.\r\n  [코드예시]\r\n  fetch(\"https://jsonplaceholder.typicode.com/posts/1\").then((response) =>\r\n  console.log(response) // (콘솔에서보면) 응답 객체를 통해 응답 상태가 200 OK\r\n  [REST API]\r\n  => 대부분의 REST API들은 JSON 형태의 데이터를 응답하기 때문에, 응답(response) 객체는 json() 메서드를 제공\r\n  => 이 메서드를 호출하면, 응답(response) 객체로 부터 JSON 포멧의 응답 전문을 자바스크립트 객체로 변환하여 얻을 수 있음.\r\n);\r\n*/\r\n\r\n/* #2. useEffect => API 데이터 가져오는 기능,  */\r\n  // useEffect는 클래스형의 생명주기함수를 함수형 컴포넌트에서도 사용할 수 있도록 나온 기능임!\r\n  // 첫번째 인자 = 실행시킬 함수, 두번째 인자에는 검사할 변수 값(배열로 넣습니다![])을 넣어 변수값이 변경될 때 마다 실행됨.\r\n  // 두번째 인자를 안 넣을 경우 => 리렌더링될때마다 실행되며, 빈배열을 넣게될 시 => 최초 1회만 실행!\r\n  // useEffect는 처음 실행할 때 반드시 한번 실행됨!\r\n  useEffect(()=>{\r\n    // 외부 데이터를 가져오도록 fetch 함수를 사용.\r\n    // jquery의 ajax를 사용해보셨다면 이해하기 편할 수 있습니다!\r\n    // fetch를 통해 외부 데이터를 json으로 받아올 수 있음.\r\n\r\n    // fetch 기본설정\r\n    // 옵션이 여러가지 있지만.. 기본 옵션인 GET method로 받은 설정만 넣음.\r\n    // form 태그의 개념과 비슷합니다!\r\n    const init = {\r\n      method: \"GET\", // GET, POST, PUT, DELETE...\r\n    };\r\n\r\n    // 작성할 도큐먼트 찾기\r\n    const weatherEl = document.querySelector('.weather');\r\n    weatherEl.innerHTML = `<img src=\"./images/load.gif\" alt=\"로딩화면\"/>`;\r\n\r\n    // fetch를 실행. 첫번째 인자 = 주소값, 두번째 인자 = 옵션값 넣어줌.\r\n    // 주소에 필요한 옵션 파라미터를 넣어줌. 여기서는 지역값과 api key를 넣었음. (?q=\"지역값\"&appid=\"API key\")\r\n    // then = fetch가 이루어지면 실행되는 함수로 => async와 await을 통해 데이터를 받을 수 있음.\r\n    // https://api.openweathermap.org/data/2.5/weather?q=Seoul&units=metric&appid=81f458812bf2ce501b166301fae5f46a \r\n    // => ?q=Seoul로 변경후 주소창 확인해 볼것\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${areaValue}&units=metric&appid=f47b7f358e7e20494119bb7bcc6b2455`, init)\r\n    // fetch(`https://api.openweathermap.org/data/2.5/weather?q=${areaValue}&units=metric&appid=cc2f3c97f80d9cd216c70602a5b38378`, init)\r\n    .then(async response => {\r\n      try {\r\n        // async와 await은 비동기 함수로, 결과 값을 받을때 까지 기다렸다가 받으면 실행.\r\n        // api를 호출했을 때 결과값을 response 인자로 받을 수 있는데, json()함수를 통해 json객체로 받아줌!!\r\n        const data = await response.json();\r\n        console.log('fetch이용 api json데이터 출력 => ' + data); // object Objedct 나옴 , 하지마\r\n\r\n        // json 데이터 확인 후, 필요 데이터를 꺼내서 html에 적용! => data 변수로 위에서 받았음\r\n        function dataWrite(){\r\n          // 일출 = unix, UTC 타입으로 반환된 값\r\n          const sunriseHour = new Date(data.sys.sunrise * 1000).getHours(); // 밀리세컨 만들어서 시간전체정보에 .getHour()로 시간만 추출\r\n          console.log('일출시간 전체 정보 출력 = ',Date(data.sys.sunrise * 1000));\r\n          const sunriseMin = new Date(data.sys.sunrise * 1000).getMinutes();\r\n          console.log('일출시간 분으로 출력 = ',sunriseMin);\r\n          // 일몰\r\n          const sunsetHour = new Date(data.sys.sunset * 1000).getHours();\r\n          const sunsetMin = new Date(data.sys.sunset * 1000).getMinutes();\r\n          // 아이콘 작성하기 = 아래 이미지에 적용\r\n          const icon = data.weather[0].icon; // 01n or 01d\r\n          const bg = document.querySelector('body');\r\n\r\n          // api 기본 아이콘 값에 낮과 밤을 나타내는 n와 d가 들어있어 \r\n          // => n이 들어있을 시에는 낮, d가 들어있을 시에는 밤으로 배경색을 줌.\r\n          if(icon.indexOf('n') > 0){ // api 아이콘이 낮이면\r\n            if(bg.classList.contains('day')){ // Weather.css 클래스가 day면\r\n              bg.classList.remove('day'); // day 제거\r\n            }\r\n            bg.classList.add('night'); // 클래스에 night 추가\r\n          }else if(icon.indexOf('d') > 0){ // api 아이콘이 밤이면\r\n            if(bg.classList.contains('night')){\r\n              bg.classList.remove('night');\r\n            }\r\n            bg.classList.add('day'); // 클래스에 day 추가\r\n          }\r\n          // return으로 document에 작성될 값을 설정. = 첫화면에 그려질 내용 코딩\r\n          return(\r\n            // ${weatherIcon[icon]}.png => 아래 수퍼컴포넌트에서 날씨 아이콘 가져옴\r\n            // ${areakr} => 브라우저 메인에 표시될 한글로 표시될 지역명 (예)서울특별시\r\n            // 현재기온 : => 나머지는 받은 api data에서 원하는 출력하면 됨\r\n            `\r\n              <div class=\"weatherIcon\">\r\n                <img class=\"weatherImg\" src=\"./images/weather/${weatherIcon[icon]}.png\">\r\n              </div>\r\n\r\n              <h2>${areakr}</h2>\r\n              <div>현재기온 : \r\n                ${data.main.temp}&deg; 최고기온 : ${data.main.temp_max}&deg; 최저기온 : \r\n                ${data.main.temp_min}&deg; 체감온도 : ${data.main.feels_like}&deg;\r\n              </div>\r\n              <div>\r\n                일출 : ${sunriseHour}시 ${sunriseMin}분 / 일몰 : ${sunsetHour}시 ${sunsetMin}분\r\n              </div>\r\n            `\r\n          )\r\n        } // end of method\r\n        weatherEl.innerHTML = dataWrite(); // 함수 <div className='weather'></div>에 적용\r\n      } catch(error) {\r\n  \r\n    }});\r\n  },[areaValue, areakr]); // 의존관계 삽입 => data변경시 useEffect() 재실행 | [areaValue=주소창 지역, areakr=한글표시 지역명= 아래 코딩해놓음]\r\n\r\n/* #3.최초 렌더링 될 시, select 폼에 미리 작성해놓은 객체를 option으로 넣음! */\r\n/* areaGroup = 하단에 수퍼컴포넌트에서 지역정보 불러옴 */\r\n  useEffect(()=>{\r\n    const areaList = document.querySelector('.areaList');\r\n    const areaWrite = areaGroup.map(char => {\r\n      return (\r\n        `<option value=\"${char.kr}\">${char.kr}</option>`\r\n      )\r\n    }).join('');  // join() 메서드 = 배열의 모든 요소를 연결해 하나의 문자열로 만듦.\r\n    // 지역 정보를 얻어와서 option \r\n    areaList.innerHTML = areaWrite;\r\n  },[])\r\n\r\n/* #4. select값을 변경했을 시 날씨정보가 해당 도시로 바뀌도록 설정 함수. */\r\n  function changeSelect(e){\r\n    e.preventDefault();\r\n    // select 선택된 지역을 할당\r\n    const areaName = document.querySelector('#select').value;\r\n    // 아래 수퍼컴포넌트에서 값 가져옴\r\n    areaGroup.forEach(result => {\r\n      if(areaName.indexOf(result.kr) > -1){ // 한글 도시명으로 값이 있으면 | 배열은 0부터니까 -1로\r\n        setAreaKr(result.text); // 동적값 바꿔줌\r\n        setAreaValue(result.en);\r\n      }else if(areaName.toLowerCase().indexOf(result.en.toLowerCase()) > -1){ // 영문 도시명으로 값이 있으면 \r\n        setAreaKr(result.text);\r\n        setAreaValue(result.en);\r\n      }\r\n    })\r\n  }\r\n/* 브라우저 하단에 폼 박스 그려줌 */\r\n  return (\r\n    <section>\r\n      <div className='weather'></div>\r\n      <h6>지역 변경</h6>\r\n      <div className='formBox'>\r\n{/* \r\n  React 에서의 this = 자바스크립트와 동작방식 같음 (객체지항에서는 객체자체를 의미)\r\n                    = 즉, 렌더링될 때 이 component 안의 메소드야! 라고 전달하는 것과 같은 의미.\r\n  a. 컴포넌트의 render()함수가 실행되면 DOM이 그려진다\r\n     이때 this 는 component 내부에서 선언한 method 객체를 가리키는 것이 맞지만,\r\n  b. event handler함수가 호출될 때의 this는 component 내부에서 선언한 method 객체를 가리키는 것이 아닌 \r\n     => 전역객체(Window)를 의미\r\n     왜냐하면 this 라는 값은 호출하는 문맥(context)에 의해 좌우되는데 \r\n     클릭이 실행되는 문맥이 바로 전역(window)객체이기 때문\r\n     [결론적으로 그래서] bind 함수를 사용 = 바인드하는 함수에서 사용하는 this의 대상을 지정해주는 역할\r\n  c. [bind() 함수]\r\n    : bind 함수는 바인드하는 함수에서 사용하는 this의 대상을 지정해주는 역할을 함\r\n  d. React 에서의 bind()\r\n     bind()함수는 전달된 인자를 this로 보내는 바인딩 함수를 만드는데(원본 함수와 동일한 기능을 하는 바인딩된 새로운 함수가 만들어 짐)\r\n     여기서 this = 다른 언어와 달리 실행 문맥(context)에 따라 변함.\r\n*/}\r\n      </div>\r\n      {/* #3의 option값 얻어와서 #4의 changeSelect실행 */}\r\n      <select id=\"select\" className='areaList' onChange={changeSelect.bind(this)}>\r\n      </select>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Weather;\r\n\r\n// 날씨 api 사이트를 통해 영어 이름을 불러와서 객체 리스트로 저장.\r\n// id는 고유값으로 넣어두었고, 각 kr, text는 수동으로 작성함.\r\n// 특이한 경우에는 comment도 달아두었습니다!\r\nconst areaGroup = [{\r\n  id: 0,\r\n  kr: '서울',\r\n  en: 'Seoul',\r\n  text: '서울특별시',\r\n},{\r\n  id: 1,\r\n  kr: '부산',\r\n  en: 'Busan',\r\n  text: '부산광역시',\r\n},{\r\n  id: 2,\r\n  kr: '인천',\r\n  en: 'Incheon',\r\n  text: '인천광역시',\r\n},{\r\n  id: 3,\r\n  kr: '대구',\r\n  en: 'Daegu',\r\n  text: '대구광역시',\r\n},{\r\n  id: 4,\r\n  kr: '대전',\r\n  en: 'Daejeon',\r\n  text: '대전광역시',\r\n},{\r\n  id: 5,\r\n  kr: '광주',\r\n  en: 'Gwangju',\r\n  text: '광주광역시',\r\n},{\r\n  id: 6,\r\n  kr: '수원',\r\n  en: 'Suwon-si',\r\n  text: '경기도 수원시',\r\n},{\r\n  id: 7,\r\n  kr: '울산',\r\n  en: 'Ulsan',\r\n  text: '울산광역시',\r\n},{\r\n  id: 8,\r\n  kr: '고양',\r\n  en: 'Goyang-si',\r\n  text: '경기도 고양시',\r\n},{\r\n  id: 9,\r\n  kr: '용인',\r\n  en: 'Yongin',\r\n  text: '경기도 용인시',\r\n},{\r\n  id: 10,\r\n  kr: '창원',\r\n  en: 'ChangWon',\r\n  text: '경상남도 창원시',\r\n},{\r\n  id: 11,\r\n  kr: '성남',\r\n  en: 'Seongnam-si',\r\n  text: '경기도 성남시',\r\n},{\r\n  id: 12,\r\n  kr: '청주',\r\n  en: 'Cheongju-si',\r\n  text: '충청북도 청주시',\r\n},{\r\n  id: 13,\r\n  kr: '부천',\r\n  en: 'Bucheon-si',\r\n  text: '경기도 부천시',\r\n},{\r\n  id: 14,\r\n  kr: '화성',\r\n  en: 'Hwaseong-si',\r\n  text: '경기도 화성시',\r\n},{\r\n  id: 15,\r\n  kr: '남양주',\r\n  en: 'Hwado',\r\n  text: '경기도 남양주시',\r\n  comment: '날씨 위치가 남양주시 화도읍으로 찍혀있어서 화도읍 날씨로 적용하였습니다.',\r\n},{\r\n  id: 16,\r\n  kr: '전주',\r\n  en: 'Jeonju',\r\n  text: '전라북도 전주시',\r\n},{\r\n  id: 17,\r\n  kr: '천안',\r\n  en: 'Cheonan',\r\n  text: '충청남도 천안시',\r\n},{\r\n  id: 18,\r\n  kr: '안산',\r\n  en: 'Ansan-si',\r\n  text: '경기도 안산시',\r\n},{\r\n  id: 19,\r\n  kr: '안양',\r\n  en: 'Anyang-si',\r\n  text: '경기도 안양시',\r\n},{\r\n  id: 20,\r\n  kr: '김해',\r\n  en: 'Gimhae',\r\n  text: '경상남도 김해시',\r\n},{\r\n  id: 21,\r\n  kr: '평택',\r\n  en: 'Pyeongtaek-si',\r\n  text: '경기도 평택시',\r\n},{\r\n  id: 22,\r\n  kr: '포항',\r\n  en: 'Pohang',\r\n  text: '경상북도 포항시',\r\n},{\r\n  id: 23,\r\n  kr: '제주',\r\n  en: 'Jeju',\r\n  text: '제주특별자치도 제주시',\r\n},{\r\n  id: 24,\r\n  kr: '시흥',\r\n  en: 'Ansan-si',\r\n  text: '경기도 시흥시',\r\n  comment: '시흥시 날씨를 지원하지 않아, 가까운 안산 날씨로 적용하였습니다.'\r\n},{\r\n  id: 25,\r\n  kr: '파주',\r\n  en: 'Paju',\r\n  text: '경기도 파주시',\r\n},{\r\n  id: 26,\r\n  kr: '의정부',\r\n  en: 'Uijeongbu-si',\r\n  text: '경기도 의정부시',\r\n},{\r\n  id: 27,\r\n  kr: '김포',\r\n  en: 'Gimpo-si',\r\n  text: '경기도 김포시',\r\n},{\r\n  id: 28,\r\n  kr: '구미',\r\n  en: 'Gumi',\r\n  text: '경상북도 구미시',\r\n},{\r\n  id: 29,\r\n  kr: '경기도 광주',\r\n  en: 'Goenae',\r\n  text: '경기도 광주시',\r\n  comment: '날씨 위치가 광주시 남종면으로 찍혀있어서 남종면의 날씨로 적용하였습니다.'\r\n}]\r\n\r\nconst weatherIcon = {\r\n  // 맑음 (clear sky)\r\n  '01d' : '01d',\r\n  '01n' : '01n',\r\n  // 흐림 (약간의 구름 \tfew clouds)\r\n  '02d' : '02d',\r\n  '02n' : '02n',\r\n  // 흐림 (흩어진 구름 scattered clouds)\r\n  '03d' : '02d',\r\n  '03n' : '02n',\r\n  // 많은 구름 (broken clouds)\r\n  '04d' : '02d',\r\n  '04n' : '02n',\r\n  // 소나기 (shower rain)\r\n  '09d' : '09d',\r\n  '09n' : '09d',\r\n  // 비 (rain)\r\n  '10d' : '10d',\r\n  '10n' : '10d',\r\n  // 번개 (thunderstorm)\r\n  '11d' : '11d',\r\n  '11n' : '11d',\r\n  // 눈 (snow)\r\n  '13d' : '13d',\r\n  '13n' : '13d',\r\n  // 안개 (mist)\r\n  '50d' : '50d',\r\n  '50n' : '50d',\r\n}"],"mappings":"yWAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,aAAa,CACpB,MAAO,YAAY,CACnB,MAAO,eAAe,CACtB,MAAO,yCAAyC,CAEhD,yBAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,OAAOA,CAAA,CAAG,CACjB;AACA;AACA;AACA;AACA,IAAAC,SAAA,CAAkCN,QAAQ,CAAC,OAAO,CAAC,CAAAO,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAA5CG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC9B,IAAAI,UAAA,CAA4BX,QAAQ,CAAC,OAAO,CAAC,CAAAY,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAAtCE,MAAM,CAAAD,UAAA,IAAEE,SAAS,CAAAF,UAAA,IAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EA3BA,CA6BA,yCACE;AACA;AACA;AACA;AACAb,SAAS,CAAC,UAAI,CACZ;AACA;AACA;AAEA;AACA;AACA;AACA,GAAM,CAAAgB,IAAI,CAAG,CACXC,MAAM,CAAE,KAAO;AACjB,CAAC,CAED;AACA,GAAM,CAAAC,SAAS,CAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CACpDF,SAAS,CAACG,SAAS,oEAA8C,CAEjE;AACA;AACA;AACA;AACA;AACAC,KAAK,sDAAAC,MAAA,CAAsDb,SAAS,yDAAwDM,IAAI,CAChI;AAAA,CACCQ,IAAI,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAMC,QAAQ,MAAAC,SAAA,CAAAC,IAAA,QAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAC,IAAA,GAKkC;AAElD;AACSL,SAAS,CAAlB,QAAS,CAAAA,SAASA,CAAA,CAAE,CAClB;AACA,GAAM,CAAAO,WAAW,CAAG,GAAI,CAAAC,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACC,OAAO,CAAG,IAAI,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE;AAClEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAACL,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACC,OAAO,CAAG,IAAI,CAAC,CAAC,CAC7D,GAAM,CAAAI,UAAU,CAAG,GAAI,CAAAN,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACC,OAAO,CAAG,IAAI,CAAC,CAACK,UAAU,CAAC,CAAC,CACjEH,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAACC,UAAU,CAAC,CACxC;AACA,GAAM,CAAAE,UAAU,CAAG,GAAI,CAAAR,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACQ,MAAM,CAAG,IAAI,CAAC,CAACN,QAAQ,CAAC,CAAC,CAC9D,GAAM,CAAAO,SAAS,CAAG,GAAI,CAAAV,IAAI,CAACP,IAAI,CAACQ,GAAG,CAACQ,MAAM,CAAG,IAAI,CAAC,CAACF,UAAU,CAAC,CAAC,CAC/D;AACA,GAAM,CAAAI,IAAI,CAAGlB,IAAI,CAACmB,OAAO,CAAC,CAAC,CAAC,CAACD,IAAI,CAAE;AACnC,GAAM,CAAAE,EAAE,CAAGjC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAEzC;AACA;AACA,GAAG8B,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAAE;AACzB,GAAGD,EAAE,CAACE,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;AAChCH,EAAE,CAACE,SAAS,CAACE,MAAM,CAAC,KAAK,CAAC,CAAE;AAC9B,CACAJ,EAAE,CAACE,SAAS,CAACG,GAAG,CAAC,OAAO,CAAC,CAAE;AAC7B,CAAC,IAAK,IAAGP,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAAE;AAC/B,GAAGD,EAAE,CAACE,SAAS,CAACC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAChCH,EAAE,CAACE,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC,CAC9B,CACAJ,EAAE,CAACE,SAAS,CAACG,GAAG,CAAC,KAAK,CAAC,CAAE;AAC3B,CACA;AACA,MACE;AACA;AACA;AAAA,iHAAAlC,MAAA,CAGoDmC,WAAW,CAACR,IAAI,CAAC,wDAAA3B,MAAA,CAG7DT,MAAM,4EAAAS,MAAA,CAERS,IAAI,CAAC2B,IAAI,CAACC,IAAI,sCAAArC,MAAA,CAAgBS,IAAI,CAAC2B,IAAI,CAACE,QAAQ,wDAAAtC,MAAA,CAChDS,IAAI,CAAC2B,IAAI,CAACG,QAAQ,sCAAAvC,MAAA,CAAgBS,IAAI,CAAC2B,IAAI,CAACI,UAAU,sFAAAxC,MAAA,CAGjDe,WAAW,YAAAf,MAAA,CAAKsB,UAAU,6BAAAtB,MAAA,CAAYwB,UAAU,YAAAxB,MAAA,CAAK0B,SAAS,gDAI7E,CAAC,CAAC;AAAAd,QAAA,CAAAE,IAAA,SAlDiB,CAAAP,QAAQ,CAACkC,IAAI,CAAC,CAAC,QAA5BhC,IAAI,CAAAG,QAAA,CAAA8B,IAAA,CACVtB,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAGZ,IAAI,CAAC,CAkDhDd,SAAS,CAACG,SAAS,CAAGU,SAAS,CAAC,CAAC,CAAE;AAAAI,QAAA,CAAAE,IAAA,iBAAAF,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAA+B,EAAA,CAAA/B,QAAA,sCAAAA,QAAA,CAAAgC,IAAA,MAAAtC,OAAA,gBAGrC,mBAAAuC,EAAA,SAAA3C,IAAA,CAAA4C,KAAA,MAAAC,SAAA,QAAC,CACL,CAAC,CAAC,CAAC5D,SAAS,CAAEI,MAAM,CAAC,CAAC,CAAE;AAE1B,yDACA,uCACEd,SAAS,CAAC,UAAI,CACZ,GAAM,CAAAuE,QAAQ,CAAGpD,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC,CACpD,GAAM,CAAAoD,SAAS,CAAGC,SAAS,CAACC,GAAG,CAAC,SAAAC,IAAI,CAAI,CACtC,yBAAApD,MAAA,CACoBoD,IAAI,CAACC,EAAE,QAAArD,MAAA,CAAKoD,IAAI,CAACC,EAAE,cAEzC,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAG;AACd;AACAN,QAAQ,CAAClD,SAAS,CAAGmD,SAAS,CAChC,CAAC,CAAC,EAAE,CAAC,CAEP,kDACE,QAAS,CAAAM,YAAYA,CAACC,CAAC,CAAC,CACtBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAClB;AACA,GAAM,CAAAC,QAAQ,CAAG9D,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC,CAAC8D,KAAK,CACxD;AACAT,SAAS,CAACU,OAAO,CAAC,SAAAC,MAAM,CAAI,CAC1B,GAAGH,QAAQ,CAAC5B,OAAO,CAAC+B,MAAM,CAACR,EAAE,CAAC,CAAG,CAAC,CAAC,CAAC,CAAE;AACpC7D,SAAS,CAACqE,MAAM,CAACC,IAAI,CAAC,CAAE;AACxB1E,YAAY,CAACyE,MAAM,CAACE,EAAE,CAAC,CACzB,CAAC,IAAK,IAAGL,QAAQ,CAACM,WAAW,CAAC,CAAC,CAAClC,OAAO,CAAC+B,MAAM,CAACE,EAAE,CAACC,WAAW,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CAAE;AACtExE,SAAS,CAACqE,MAAM,CAACC,IAAI,CAAC,CACtB1E,YAAY,CAACyE,MAAM,CAACE,EAAE,CAAC,CACzB,CACF,CAAC,CAAC,CACJ,CACF,uBACE,mBACEjF,KAAA,YAAAmF,QAAA,eACErF,IAAA,QAAKsF,SAAS,CAAC,SAAS,CAAM,CAAC,cAC/BtF,IAAA,OAAAqF,QAAA,CAAI,2BAAK,CAAI,CAAC,cACdrF,IAAA,QAAKsF,SAAS,CAAC,SAAS,CAiBnB,CAAC,cAENtF,IAAA,WAAQuF,EAAE,CAAC,QAAQ,CAACD,SAAS,CAAC,UAAU,CAACE,QAAQ,CAAEb,YAAY,CAACc,IAAI,CAAC,IAAI,CAAE,CACnE,CAAC,EACF,CAAC,CAEd,CAEA,cAAe,CAAAtF,OAAO,CAEtB;AACA;AACA;AACA,GAAM,CAAAmE,SAAS,CAAG,CAAC,CACjBiB,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,OAAO,CACXD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,OAAO,CACXD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,SAAS,CACbD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,OAAO,CACXD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,SAAS,CACbD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,SAAS,CACbD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,UAAU,CACdD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,OAAO,CACXD,IAAI,CAAE,OACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,WAAW,CACfD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,CAAC,CACLd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,QAAQ,CACZD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,UAAU,CACdD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,aAAa,CACjBD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,aAAa,CACjBD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,YAAY,CAChBD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,aAAa,CACjBD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,KAAK,CACTU,EAAE,CAAE,OAAO,CACXD,IAAI,CAAE,UAAU,CAChBQ,OAAO,CAAE,0CACX,CAAC,CAAC,CACAH,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,QAAQ,CACZD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,SAAS,CACbD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,UAAU,CACdD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,WAAW,CACfD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,QAAQ,CACZD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,eAAe,CACnBD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,QAAQ,CACZD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,MAAM,CACVD,IAAI,CAAE,aACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,UAAU,CACdD,IAAI,CAAE,SAAS,CACfQ,OAAO,CAAE,sCACX,CAAC,CAAC,CACAH,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,MAAM,CACVD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,KAAK,CACTU,EAAE,CAAE,cAAc,CAClBD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,UAAU,CACdD,IAAI,CAAE,SACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,IAAI,CACRU,EAAE,CAAE,MAAM,CACVD,IAAI,CAAE,UACR,CAAC,CAAC,CACAK,EAAE,CAAE,EAAE,CACNd,EAAE,CAAE,QAAQ,CACZU,EAAE,CAAE,QAAQ,CACZD,IAAI,CAAE,SAAS,CACfQ,OAAO,CAAE,0CACX,CAAC,CAAC,CAEF,GAAM,CAAAnC,WAAW,CAAG,CAClB;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KAAK,CACb;AACA,KAAK,CAAG,KAAK,CACb,KAAK,CAAG,KACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}